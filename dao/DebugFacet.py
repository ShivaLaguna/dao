# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.2.2

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import ContractContainer
from eth_typing.evm import ChecksumAddress


PROJECT_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
BUILD_DIRECTORY = os.path.join(PROJECT_DIRECTORY, "build", "contracts")


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> str:
    return raw_value


def get_abi_json(abi_name: str) -> List[Dict[str, Any]]:
    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    abi_json = build.get("abi")
    if abi_json is None:
        raise ValueError(f"Could not find ABI definition in: {abi_full_path}")

    return abi_json


def contract_from_build(abi_name: str) -> ContractContainer:
    # This is workaround because brownie currently doesn't support loading the same project multiple
    # times. This causes problems when using multiple contracts from the same project in the same
    # python project.
    PROJECT = project.main.Project("moonworm", Path(PROJECT_DIRECTORY))

    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    return ContractContainer(PROJECT, build)


class DebugFacet:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "DebugFacet"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("DebugFacet")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(self, transaction_config):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(transaction_config)
        self.address = deployed_contract.address
        self.contract = deployed_contract
        return deployed_contract.tx

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def debug_batch_register_admin(self, _a: List, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugBatchRegisterAdmin(_a, transaction_config)

    def debug_echo(
        self, s: str, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugEcho.call(s, block_identifier=block_number)

    def debug_echo_uint(
        self, i: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugEchoUint.call(i, block_identifier=block_number)

    def debug_emit_test_event(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugEmitTestEvent(transaction_config)

    def debug_expected_failure(
        self, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugExpectedFailure.call(block_identifier=block_number)

    def debug_expected_revert_on_data_write(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugExpectedRevertOnDataWrite(transaction_config)

    def debug_get_role(
        self,
        _address: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugGetRole.call(_address, block_identifier=block_number)

    def debug_ping(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugPing.call(block_identifier=block_number)

    def debug_register_admin(self, _a: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugRegisterAdmin(_a, transaction_config)

    def debug_register_debugger(self, _a: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugRegisterDebugger(_a, transaction_config)

    def debug_repair_missing_roles(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.debugRepairMissingRoles(transaction_config)

    def disable_debugging(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.disableDebugging(transaction_config)

    def disable_lmdv1_debugging(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.disableLMDV1Debugging(transaction_config)

    def enable_lmdv1_debugging(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.enableLMDV1Debugging(transaction_config)

    def initialize_lmdv1_library(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.initializeLMDV1Library(transaction_config)


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        parser.add_argument(
            "--block-number",
            required=False,
            type=int,
            help="Call at the given block number, defaults to latest",
        )
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )
    parser.add_argument(
        "--value", default=None, help="Value of the transaction in wei(optional)"
    )
    parser.add_argument("--verbose", action="store_true", help="Print verbose output")


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = DebugFacet(None)
    result = contract.deploy(transaction_config=transaction_config)
    print(result)
    print(result.info())


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    result = contract.verify_contract()
    print(result)


def handle_debug_batch_register_admin(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.debug_batch_register_admin(
        _a=args.a_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())

def handle_debug_echo(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    result = contract.debug_echo(s=args.s, block_number=args.block_number)
    print(result)


def handle_debug_echo_uint(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    result = contract.debug_echo_uint(i=args.i, block_number=args.block_number)
    print(result)


def handle_debug_emit_test_event(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.debug_emit_test_event(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_debug_expected_failure(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    result = contract.debug_expected_failure(block_number=args.block_number)
    print(result)


def handle_debug_expected_revert_on_data_write(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.debug_expected_revert_on_data_write(
        transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())

def handle_debug_get_role(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    result = contract.debug_get_role(
        _address=args.address_arg, block_number=args.block_number
    )
    print(result)

def handle_debug_ping(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    result = contract.debug_ping(block_number=args.block_number)
    print(result)


def handle_debug_register_admin(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.debug_register_admin(
        _a=args.a_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_debug_register_debugger(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.debug_register_debugger(
        _a=args.a_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_debug_repair_missing_roles(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.debug_repair_missing_roles(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())

def handle_disable_debugging(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.disable_debugging(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_disable_lmdv1_debugging(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.disable_lmdv1_debugging(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_enable_lmdv1_debugging(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.enable_lmdv1_debugging(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_initialize_lmdv1_library(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = DebugFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.initialize_lmdv1_library(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for DebugFacet")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    debug_batch_register_admin_parser = subcommands.add_parser(
        "debug-batch-register-admin"
    )
    add_default_arguments(debug_batch_register_admin_parser, True)
    debug_batch_register_admin_parser.add_argument(
        "--a-arg", required=True, help="Type: address[]", nargs="+"
    )
    debug_batch_register_admin_parser.set_defaults(
        func=handle_debug_batch_register_admin
    )

    debug_batch_set_token_uri_parser = subcommands.add_parser(
        "debug-batch-set-token-uri"
    )
    add_default_arguments(debug_batch_set_token_uri_parser, True)
    debug_batch_set_token_uri_parser.add_argument(
        "--token-ids-arg", required=True, help="Type: uint256[]", nargs="+"
    )
    debug_batch_set_token_uri_parser.add_argument(
        "--token-ur-is-arg", required=True, help="Type: string[]", nargs="+"
    )
    debug_batch_set_token_uri_parser.set_defaults(func=handle_debug_batch_set_token_uri)

    debug_burn_unicorn_parser = subcommands.add_parser("debug-burn-unicorn")
    add_default_arguments(debug_burn_unicorn_parser, True)
    debug_burn_unicorn_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_burn_unicorn_parser.set_defaults(func=handle_debug_burn_unicorn)

    debug_clear_idempotence_state_parser = subcommands.add_parser(
        "debug-clear-idempotence-state"
    )
    add_default_arguments(debug_clear_idempotence_state_parser, True)
    debug_clear_idempotence_state_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_clear_idempotence_state_parser.set_defaults(
        func=handle_debug_clear_idempotence_state
    )

    debug_downgrade_to_baby_parser = subcommands.add_parser("debug-downgrade-to-baby")
    add_default_arguments(debug_downgrade_to_baby_parser, True)
    debug_downgrade_to_baby_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_downgrade_to_baby_parser.set_defaults(func=handle_debug_downgrade_to_baby)

    debug_downgrade_to_egg_parser = subcommands.add_parser("debug-downgrade-to-egg")
    add_default_arguments(debug_downgrade_to_egg_parser, True)
    debug_downgrade_to_egg_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_downgrade_to_egg_parser.set_defaults(func=handle_debug_downgrade_to_egg)

    debug_echo_parser = subcommands.add_parser("debug-echo")
    add_default_arguments(debug_echo_parser, False)
    debug_echo_parser.add_argument("--s", required=True, help="Type: string", type=str)
    debug_echo_parser.set_defaults(func=handle_debug_echo)

    debug_echo_uint_parser = subcommands.add_parser("debug-echo-uint")
    add_default_arguments(debug_echo_uint_parser, False)
    debug_echo_uint_parser.add_argument(
        "--i", required=True, help="Type: uint256", type=int
    )
    debug_echo_uint_parser.set_defaults(func=handle_debug_echo_uint)

    debug_emit_test_event_parser = subcommands.add_parser("debug-emit-test-event")
    add_default_arguments(debug_emit_test_event_parser, True)
    debug_emit_test_event_parser.set_defaults(func=handle_debug_emit_test_event)

    debug_expected_failure_parser = subcommands.add_parser("debug-expected-failure")
    add_default_arguments(debug_expected_failure_parser, False)
    debug_expected_failure_parser.set_defaults(func=handle_debug_expected_failure)

    debug_expected_revert_on_data_write_parser = subcommands.add_parser(
        "debug-expected-revert-on-data-write"
    )
    add_default_arguments(debug_expected_revert_on_data_write_parser, True)
    debug_expected_revert_on_data_write_parser.set_defaults(
        func=handle_debug_expected_revert_on_data_write
    )

    debug_get_bio_clock_parser = subcommands.add_parser("debug-get-bio-clock")
    add_default_arguments(debug_get_bio_clock_parser, False)
    debug_get_bio_clock_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_get_bio_clock_parser.set_defaults(func=handle_debug_get_bio_clock)

    debug_get_dna_parser = subcommands.add_parser("debug-get-dna")
    add_default_arguments(debug_get_dna_parser, False)
    debug_get_dna_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_get_dna_parser.set_defaults(func=handle_debug_get_dna)

    debug_get_game_locked_parser = subcommands.add_parser("debug-get-game-locked")
    add_default_arguments(debug_get_game_locked_parser, False)
    debug_get_game_locked_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_get_game_locked_parser.set_defaults(func=handle_debug_get_game_locked)

    debug_get_hatching_started_parser = subcommands.add_parser(
        "debug-get-hatching-started"
    )
    add_default_arguments(debug_get_hatching_started_parser, False)
    debug_get_hatching_started_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_get_hatching_started_parser.set_defaults(
        func=handle_debug_get_hatching_started
    )

    debug_get_lifecycle_stage_parser = subcommands.add_parser(
        "debug-get-lifecycle-stage"
    )
    add_default_arguments(debug_get_lifecycle_stage_parser, False)
    debug_get_lifecycle_stage_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_get_lifecycle_stage_parser.set_defaults(func=handle_debug_get_lifecycle_stage)

    debug_get_role_parser = subcommands.add_parser("debug-get-role")
    add_default_arguments(debug_get_role_parser, False)
    debug_get_role_parser.add_argument(
        "--address-arg", required=True, help="Type: address"
    )
    debug_get_role_parser.set_defaults(func=handle_debug_get_role)

    debug_get_token_uri_parser = subcommands.add_parser("debug-get-token-uri")
    add_default_arguments(debug_get_token_uri_parser, False)
    debug_get_token_uri_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_get_token_uri_parser.set_defaults(func=handle_debug_get_token_uri)

    debug_hatch_to_random_adult_parser = subcommands.add_parser(
        "debug-hatch-to-random-adult"
    )
    add_default_arguments(debug_hatch_to_random_adult_parser, True)
    debug_hatch_to_random_adult_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_hatch_to_random_adult_parser.set_defaults(
        func=handle_debug_hatch_to_random_adult
    )

    debug_mint_genesis_egg_parser = subcommands.add_parser("debug-mint-genesis-egg")
    add_default_arguments(debug_mint_genesis_egg_parser, True)
    debug_mint_genesis_egg_parser.add_argument(
        "--to-arg", required=True, help="Type: address"
    )
    debug_mint_genesis_egg_parser.set_defaults(func=handle_debug_mint_genesis_egg)

    debug_ping_parser = subcommands.add_parser("debug-ping")
    add_default_arguments(debug_ping_parser, False)
    debug_ping_parser.set_defaults(func=handle_debug_ping)

    debug_register_admin_parser = subcommands.add_parser("debug-register-admin")
    add_default_arguments(debug_register_admin_parser, True)
    debug_register_admin_parser.add_argument(
        "--a-arg", required=True, help="Type: address"
    )
    debug_register_admin_parser.set_defaults(func=handle_debug_register_admin)

    debug_register_debugger_parser = subcommands.add_parser("debug-register-debugger")
    add_default_arguments(debug_register_debugger_parser, True)
    debug_register_debugger_parser.add_argument(
        "--a-arg", required=True, help="Type: address"
    )
    debug_register_debugger_parser.set_defaults(func=handle_debug_register_debugger)

    debug_repair_missing_roles_parser = subcommands.add_parser(
        "debug-repair-missing-roles"
    )
    add_default_arguments(debug_repair_missing_roles_parser, True)
    debug_repair_missing_roles_parser.set_defaults(
        func=handle_debug_repair_missing_roles
    )

    debug_set_bio_clock_parser = subcommands.add_parser("debug-set-bio-clock")
    add_default_arguments(debug_set_bio_clock_parser, True)
    debug_set_bio_clock_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_bio_clock_parser.add_argument(
        "--timestamp", required=True, help="Type: uint256", type=int
    )
    debug_set_bio_clock_parser.set_defaults(func=handle_debug_set_bio_clock)

    debug_set_breeding_points_parser = subcommands.add_parser(
        "debug-set-breeding-points"
    )
    add_default_arguments(debug_set_breeding_points_parser, True)
    debug_set_breeding_points_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_breeding_points_parser.add_argument(
        "--breeding-points-arg", required=True, help="Type: uint8", type=int
    )
    debug_set_breeding_points_parser.set_defaults(func=handle_debug_set_breeding_points)

    debug_set_dna_parser = subcommands.add_parser("debug-set-dna")
    add_default_arguments(debug_set_dna_parser, True)
    debug_set_dna_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_dna_parser.add_argument(
        "--dna-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_dna_parser.set_defaults(func=handle_debug_set_dna)

    debug_set_game_locked_parser = subcommands.add_parser("debug-set-game-locked")
    add_default_arguments(debug_set_game_locked_parser, True)
    debug_set_game_locked_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_game_locked_parser.add_argument(
        "--val-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    debug_set_game_locked_parser.set_defaults(func=handle_debug_set_game_locked)

    debug_set_genesis_flag_parser = subcommands.add_parser("debug-set-genesis-flag")
    add_default_arguments(debug_set_genesis_flag_parser, True)
    debug_set_genesis_flag_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_genesis_flag_parser.add_argument(
        "--value-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    debug_set_genesis_flag_parser.set_defaults(func=handle_debug_set_genesis_flag)

    debug_set_hatching_started_parser = subcommands.add_parser(
        "debug-set-hatching-started"
    )
    add_default_arguments(debug_set_hatching_started_parser, True)
    debug_set_hatching_started_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_hatching_started_parser.add_argument(
        "--val-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    debug_set_hatching_started_parser.set_defaults(
        func=handle_debug_set_hatching_started
    )

    debug_set_idempotence_state_parser = subcommands.add_parser(
        "debug-set-idempotence-state"
    )
    add_default_arguments(debug_set_idempotence_state_parser, True)
    debug_set_idempotence_state_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_idempotence_state_parser.add_argument(
        "--state-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_idempotence_state_parser.set_defaults(
        func=handle_debug_set_idempotence_state
    )

    debug_set_new_egg_waiting_for_rng_parser = subcommands.add_parser(
        "debug-set-new-egg-waiting-for-rng"
    )
    add_default_arguments(debug_set_new_egg_waiting_for_rng_parser, True)
    debug_set_new_egg_waiting_for_rng_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_new_egg_waiting_for_rng_parser.add_argument(
        "--val-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    debug_set_new_egg_waiting_for_rng_parser.set_defaults(
        func=handle_debug_set_new_egg_waiting_for_rng
    )

    debug_set_new_egg_waiting_for_token_uri_parser = subcommands.add_parser(
        "debug-set-new-egg-waiting-for-token-uri"
    )
    add_default_arguments(debug_set_new_egg_waiting_for_token_uri_parser, True)
    debug_set_new_egg_waiting_for_token_uri_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_new_egg_waiting_for_token_uri_parser.add_argument(
        "--val-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    debug_set_new_egg_waiting_for_token_uri_parser.set_defaults(
        func=handle_debug_set_new_egg_waiting_for_token_uri
    )

    debug_set_origin_parser = subcommands.add_parser("debug-set-origin")
    add_default_arguments(debug_set_origin_parser, True)
    debug_set_origin_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_origin_parser.add_argument(
        "--val-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    debug_set_origin_parser.set_defaults(func=handle_debug_set_origin)

    debug_set_token_uri_parser = subcommands.add_parser("debug-set-token-uri")
    add_default_arguments(debug_set_token_uri_parser, True)
    debug_set_token_uri_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_token_uri_parser.add_argument(
        "--uri-arg", required=True, help="Type: string", type=str
    )
    debug_set_token_uri_parser.set_defaults(func=handle_debug_set_token_uri)

    debug_set_version_parser = subcommands.add_parser("debug-set-version")
    add_default_arguments(debug_set_version_parser, True)
    debug_set_version_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    debug_set_version_parser.add_argument(
        "--version-arg", required=True, help="Type: uint8", type=int
    )
    debug_set_version_parser.set_defaults(func=handle_debug_set_version)

    disable_debugging_parser = subcommands.add_parser("disable-debugging")
    add_default_arguments(disable_debugging_parser, True)
    disable_debugging_parser.set_defaults(func=handle_disable_debugging)

    disable_lmdv1_debugging_parser = subcommands.add_parser("disable-lmdv1-debugging")
    add_default_arguments(disable_lmdv1_debugging_parser, True)
    disable_lmdv1_debugging_parser.set_defaults(func=handle_disable_lmdv1_debugging)

    enable_lmdv1_debugging_parser = subcommands.add_parser("enable-lmdv1-debugging")
    add_default_arguments(enable_lmdv1_debugging_parser, True)
    enable_lmdv1_debugging_parser.set_defaults(func=handle_enable_lmdv1_debugging)

    initialize_lmdv1_library_parser = subcommands.add_parser("initialize-lmdv1-library")
    add_default_arguments(initialize_lmdv1_library_parser, True)
    initialize_lmdv1_library_parser.set_defaults(func=handle_initialize_lmdv1_library)

    set_origin_flag_parser = subcommands.add_parser("set-origin-flag")
    add_default_arguments(set_origin_flag_parser, True)
    set_origin_flag_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    set_origin_flag_parser.add_argument(
        "--value-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    set_origin_flag_parser.set_defaults(func=handle_set_origin_flag)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
